#include <iostream>
#include <vector>
#include <string>

// Base class: Person
class Person {
protected:
    std::string name;
    int id;

public:
    Person(std::string name, int id) : name(name), id(id) {}

    // Virtual function to allow polymorphic behavior
    virtual void displayInfo() {
        std::cout << "Name: " << name << ", ID: " << id << std::endl;
    }
};

// Derived class: Student
class Student : public Person {
private:
    std::string major;
    double gpa;

public:
    Student(std::string name, int id, std::string major, double gpa)
        : Person(name, id), major(major), gpa(gpa) {}

    void calculateSemesterGPA(std::vector<double> grades) {
        double total = 0.0;
        for (double grade : grades) {
            total += grade;
        }
        gpa = total / grades.size();
        std::cout << "Semester GPA: " << gpa << std::endl;
    }

    // Override the displayInfo method to include student-specific information
    void displayInfo() override {
        Person::displayInfo();
        std::cout << "Major: " << major << ", GPA: " << gpa << std::endl;
    }
};
// Derived class: Faculty
class Faculty : public Person {
private:
    std::string department;
    std::string title;

public:
    Faculty(std::string name, int id, std::string department, std::string title)
        : Person(name, id), department(department), title(title) {}

    void teachCourse(std::string courseName) {
        std::cout << "Teaching " << courseName << " in " << department << std::endl;
    }

    // Override the displayInfo method to include faculty-specific information
    void displayInfo() override {
        Person::displayInfo();
        std::cout << "Department: " << department << ", Title: " << title << std::endl;
    }
};
// Derived class: Staff (example of further derived classes)
class Staff : public Person {
private:
    std::string role;

public:
    Staff(std::string name, int id, std::string role)
        : Person(name, id), role(role) {}

    // Override the displayInfo method to include staff-specific information
    void displayInfo() override {
        Person::displayInfo();
        std::cout << "Role: " << role << std::endl;
    }
};

int main() {
    Student student("Raju", 1, "Computer Science", 3);
    student.displayInfo();
    student.calculateSemesterGPA({95, 85, 99});

    Faculty faculty("Harsh", 7, "Mathematics", "Teacherr");
    faculty.displayInfo();
    faculty.teachCourse("Linear Algebra");

    Staff staff("John", 3, "Customer Support");
    staff.displayInfo();

    return 0;
} 
