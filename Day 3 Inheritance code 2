/*Question : Scenario:
Design a class hierarchy to represent various entities in a university system.
Base Class (Person):

Data members: name (string), age (int)
Member functions: getDetails(), a virtual function to print basic person details
Derived Class (Student): (Single Inheritance)
Inherits from Person
Data members: studentId (int), major (string) Member functions:
setMajor(string) to set the student's major
getMajor() to retrieve the major
Override getDetails() to include student-specific information
Derived Class (Faculty): (Single Inheritance)
Inherits from Person
Data members: department (string), employeeId (int)
Member functions:
setDepartment(string) to set the faculty member's department
getDepartment() to retrieve the department
Override getDetails() to include faculty-specific information
Derived Class (TeachingAssistant): (Multilevel Inheritance)

Inherits from Student (inherits indirectly from Person as well)
Data member: coursesTeaching (array/vector of strings)
Member functions:
setCoursesTeaching(string[]) to set the courses the TA is teaching
getCoursesTeaching() to retrieve the list of courses
Override getDetails() to include TA-specific information (e.g., courses)
Derived Class (ResearchAssistant): (Hierarchical Inheritance)

Inherits from Person (separate inheritance from Student)
Data members: researchArea (string), supervisor (string)
Member functions:
setResearchArea(string) to set the research area
getResearchArea() to retrieve the research area
setSupervisor(string) to set the research supervisor
getSupervisor() to retrieve the supervisor
Override getDetails() to include RA-specific information
Derived Class (GraduateStudentTA): (Hybrid Inheritance)

Inherits from both Student and TeachingAssistant (combines functionality)
Might have additional data members or functions specific to graduate student TAs */



#include <iostream>
#include <vector>
#include <string>
using namespace std;

// Base class Person
class Person {
protected:
    string name;
    int age;

public:
    Person(const string& name, int age) : name(name), age(age) {}

    virtual void getDetails() const {
        cout << "Name: " << name << endl;
        cout << "Age: " << age << endl;
    }
};

// Derived class Student
class Student : public Person {
protected:
    int studentId;
    string major;

public:
    Student(const string& name, int age, int studentId)
        : Person(name, age), studentId(studentId) {}

    void setMajor(const string& major) {
        this->major = major;
    }

    string getMajor() const {
        return major;
    }

    void getDetails() const override {
        Person::getDetails();
        cout << "Student ID: " << studentId << endl;
        cout << "Major: " << major << endl;
    }
};

// Derived class Faculty
class Faculty : public Person {
protected:
    string department;
    int employeeId;

public:
    Faculty(const string& name, int age, int employeeId)
        : Person(name, age), employeeId(employeeId) {}

    void setDepartment(const string& department) {
        this->department = department;
    }

    string getDepartment() const {
        return department;
    }

    void getDetails() const override {
        Person::getDetails();
        cout << "Employee ID: " << employeeId << endl;
        cout << "Department: " << department << endl;
    }
};

// Derived class TeachingAssistant
class TeachingAssistant : public Person {
protected:
    vector<string> coursesTeaching;

public:
    TeachingAssistant(const string& name, int age)
        : Person(name, age) {}

    void setCoursesTeaching(const vector<string>& courses) {
        coursesTeaching = courses;
    }

    vector<string> getCoursesTeaching() const {
        return coursesTeaching;
    }

    void getDetails() const override {
        Person::getDetails();
        cout << "Teaching Assistant" << endl;
        cout << "Courses Teaching:";
        for (const auto& course : coursesTeaching) {
            cout << " " << course;
        }
        cout << endl;
    }
};

// Derived class ResearchAssistant
class ResearchAssistant : public Person {
protected:
    string researchArea;
    string supervisor;

public:
    ResearchAssistant(const string& name, int age)
        : Person(name, age) {}

    void setResearchArea(const string& researchArea) {
        this->researchArea = researchArea;
    }

    string getResearchArea() const {
        return researchArea;
    }

    void setSupervisor(const string& supervisor) {
        this->supervisor = supervisor;
    }

    string getSupervisor() const {
        return supervisor;
    }

    void getDetails() const override {
        Person::getDetails();
        cout << "Research Assistant" << endl;
        cout << "Research Area: " << researchArea << endl;
        cout << "Supervisor: " << supervisor << endl;
    }
};

// Derived class GraduateStudentTA
class GraduateStudentTA : public Student, public TeachingAssistant {
public:
    GraduateStudentTA(const string& name, int age, int studentId)
        : Student(name, age, studentId), TeachingAssistant(name, age) {}

    void getDetails() const override {
        Student::getDetails();
        TeachingAssistant::getDetails();
    }
};

int main() {
    // Example usage
    Student student("Jimmy", 21, 1);
    student.setMajor("Computer Science");

    Faculty faculty("Jismon", 20, 2);
    faculty.setDepartment("Physics");

    TeachingAssistant ta("Arvind", 25);
    ta.setCoursesTeaching({"Basics to Linux System"});

    ResearchAssistant ra("James", 28);
    ra.setResearchArea("Big Data");
    ra.setSupervisor("Er. ");

    GraduateStudentTA gradTA("Meena", 24, 1);
    gradTA.Student::setMajor("Mathematics");
    gradTA.TeachingAssistant::setCoursesTeaching({"Advance Graphs", "Trignometry"});

    // Printing details
    cout << "Student Details:" << endl;
    student.getDetails();
    cout << endl << "Faculty Details:" << endl;
    faculty.getDetails();
    cout << endl << "Teaching Assistant Details:" << endl;
    ta.getDetails();
    cout << endl << "Research Assistant Details:" << endl;
    ra.getDetails();
    cout << endl << "Graduate Student TA Details:" << endl;
    gradTA.getDetails();

    return 0;
}    

